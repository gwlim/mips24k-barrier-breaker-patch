--- ./target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ar7240.c	2014-12-07 22:53:54.000000000 +0800
+++ ./target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_ar7240.c	2014-12-09 00:33:47.585741910 +0800
@@ -445,7 +445,7 @@ static int __ar7240sw_reg_wait(struct mi
 		if ((t & mask) == val)
 			return 0;
 
-		msleep(1);
+		usleep_range(1000, 2000);
 	}
 
 	return -ETIMEDOUT;
@@ -617,6 +617,29 @@ static void ar7240sw_setup(struct ar7240
 	/* setup Service TAG */
 	ar7240sw_reg_rmw(mii, AR7240_REG_SERVICE_TAG, AR7240_SERVICE_TAG_M, 0);
 }
+/* inspired by phy_poll_reset in drivers/net/phy/phy_device.c */
+static int ar7240sw_phy_poll_reset(struct mii_bus *bus)
+{
+	const unsigned int sleep_msecs = 20;
+	int ret, elapsed, i;
+
+	for (elapsed = sleep_msecs; elapsed <= 600;
+	     elapsed += sleep_msecs) {
+		msleep(sleep_msecs);
+		for (i = 0; i < AR7240_NUM_PHYS; i++) {
+			ret = ar7240sw_phy_read(bus, i, MII_BMCR);
+			if (ret < 0)
+				return ret;
+			if (ret & BMCR_RESET)
+				break;
+			if (i == AR7240_NUM_PHYS - 1) {
+				usleep_range(1000, 2000);
+				return 0;
+			}
+		}
+	}
+	return -ETIMEDOUT;
+}
 
 static int ar7240sw_reset(struct ar7240sw *as)
 {
@@ -629,7 +652,7 @@ static int ar7240sw_reset(struct ar7240s
 		ar7240sw_disable_port(as, i);
 
 	/* Wait for transmit queues to drain. */
-	msleep(2);
+	usleep_range(2000, 3000);
 
 	/* Reset the switch. */
 	ar7240sw_reg_write(mii, AR7240_REG_MASK_CTRL,
@@ -646,7 +669,9 @@ static int ar7240sw_reset(struct ar7240s
 		ar7240sw_phy_write(mii, i, MII_BMCR,
 				   BMCR_RESET | BMCR_ANENABLE);
 	}
-	msleep(1000);
+	ret = ar7240sw_phy_poll_reset(mii);
+	if (ret)
+		return ret;
 
 	ar7240sw_setup(as);
 	return ret;
--- ./target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c	2014-12-07 22:53:54.000000000 +0800
+++ ./target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c	2014-12-09 00:35:04.767526078 +0800
@@ -470,18 +470,18 @@ static void ag71xx_hw_init(struct ag71xx
 		reset_mask &= ~(AR71XX_RESET_GE0_PHY | AR71XX_RESET_GE1_PHY);
 
 		ath79_device_reset_set(reset_phy);
-		mdelay(50);
+		msleep(50);
 		ath79_device_reset_clear(reset_phy);
-		mdelay(200);
+		msleep(200);
 	}
 
 	ag71xx_sb(ag, AG71XX_REG_MAC_CFG1, MAC_CFG1_SR);
 	udelay(20);
 
 	ath79_device_reset_set(reset_mask);
-	mdelay(100);
+	msleep(100);
 	ath79_device_reset_clear(reset_mask);
-	mdelay(200);
+	msleep(200);
 
 	ag71xx_hw_setup(ag);
 
--- ./target/linux/ar71xx/files/arch/mips/ath79/dev-eth.c	2014-12-07 22:53:54.000000000 +0800
+++ ./target/linux/ar71xx/files/arch/mips/ath79/dev-eth.c	2014-12-09 00:37:57.074277332 +0800
@@ -1113,10 +1113,10 @@ void __init ath79_register_eth(unsigned
 
 	/* Reset the device */
 	ath79_device_reset_set(pdata->reset_bit);
-	mdelay(100);
+	msleep(100);
 
 	ath79_device_reset_clear(pdata->reset_bit);
-	mdelay(100);
+	msleep(100);
 
 	platform_device_register(pdev);
 	ath79_eth_instance++;
--- /dev/null	2014-12-08 23:04:42.832225361 +0800
+++ ./target/linux/generic/patches-3.10/2010-ath79-wdt-udelay.patch	2014-12-09 00:52:14.090999385 +0800
@@ -0,0 +1,11 @@
+--- a/drivers/watchdog/ath79_wdt.c	2014-12-08 00:34:47.000000000 +0800
++++ b/drivers/watchdog/ath79_wdt.c	2014-12-09 00:51:20.671455198 +0800
+@@ -99,7 +99,7 @@ static inline void ath79_wdt_enable(void
+ 	 * that the TIMER register is updated within the hardware
+ 	 * before enabling the watchdog.
+ 	 */
+-	udelay(2);
++	udelay(3);
+ 
+ 	ath79_wdt_wr(WDOG_REG_CTRL, WDOG_CTRL_ACTION_FCR);
+ 	/* flush write */
