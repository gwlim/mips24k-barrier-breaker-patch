--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-3.10/902-QCA-no-l2-cache-runtime-check.patch	2014-11-12 23:38:36.306128904 +0800
@@ -0,0 +1,29 @@
+Permission to use, copy, modify, and/or distribute this software for any
+purpose with or without fee is hereby granted, provided that the above
+copyright notice and this permission notice appear in all copies.
+
+THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+--- ./arch/mips/include/asm/mach-ath79/cpu-feature-overrides.h	2014-11-12 22:12:50.000000000 +0800
++++ ./arch/mips/include/asm/mach-ath79/cpu-feature-overrides.h	2014-11-12 23:23:30.337019433 +0800
+@@ -1,6 +1,6 @@
+ /*
+  *  Atheros AR71XX/AR724X/AR913X specific CPU feature overrides
+- *
++ *  Copyright (c) 2013 Qualcomm Atheros, Inc.
+  *  Copyright (C) 2008-2010 Gabor Juhos <juhosg@openwrt.org>
+  *  Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>
+  *
+@@ -22,6 +22,7 @@
+ #define cpu_has_4k_cache	1
+ #define cpu_has_tx39_cache	0
+ #define cpu_has_sb1_cache	0
++#define cpu_has_inclusive_pcaches	0
+ #define cpu_has_fpu		0
+ #define cpu_has_32fpr		0
+ #define cpu_has_counter		1
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-3.10/904-QCA-ag71xx-change-tx-and-rx-ring-max-and-default.patch	2014-11-12 23:38:02.496790025 +0800
@@ -0,0 +1,26 @@
+From 675435ecaecbc21aa97064beda3f88d48db07d79 Mon Sep 17 00:00:00 2001
+From: Ben Menchaca <ben.menchaca@qca.qualcomm.com>
+Date: Fri, 7 Jun 2013 09:36:25 -0500
+Subject: [ag71xx] change tx and rx ring max and defaults
+
+At significant speed, we were frequently hitting ring full for TX,
+causing stalls and backpressure.  Doubling the default ring size
+prevents the issue.  However, rings that are too large begin to see
+a performance decrease as cache coolness effects begin to dominate.
+We set the maximums to these empirically determined values.
+
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-12 22:03:44.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-12 23:35:55.009512420 +0800
+@@ -55,10 +55,10 @@
+ #define AG71XX_TX_RING_SPLIT		512
+ #define AG71XX_TX_RING_DS_PER_PKT	DIV_ROUND_UP(AG71XX_TX_MTU_LEN, \
+ 						     AG71XX_TX_RING_SPLIT)
+-#define AG71XX_TX_RING_SIZE_DEFAULT	48
++#define AG71XX_TX_RING_SIZE_DEFAULT	128
+ #define AG71XX_RX_RING_SIZE_DEFAULT	128
+ 
+-#define AG71XX_TX_RING_SIZE_MAX		48
++#define AG71XX_TX_RING_SIZE_MAX		128
+ #define AG71XX_RX_RING_SIZE_MAX		128
+ 
+ #ifdef CONFIG_AG71XX_DEBUG
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-3.10/905-QCA-ag71xx-no-op-for-debug-all-optimization-levels.patch	2014-11-12 23:49:30.552690160 +0800
@@ -0,0 +1,31 @@
+From 11c3f6fc6b0f772df7abe75467615208e5f37672 Mon Sep 17 00:00:00 2001
+From: Ben Menchaca <ben.menchaca@qca.qualcomm.com>
+Date: Fri, 7 Jun 2013 11:20:00 -0500
+Subject: [ag71xx] no-op for debug all optimization levels
+
+Debug code was still generating instructions at some debug levels; this
+change ensures that no debug code is needlessly generated with debug
+disabled.
+
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c	2014-11-12 22:03:44.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c	2014-11-12 23:47:08.930270878 +0800
+@@ -35,6 +35,7 @@ static inline unsigned int ag71xx_max_fr
+ 	return ETH_SWITCH_HEADER_LEN + ETH_HLEN + VLAN_HLEN + mtu + ETH_FCS_LEN;
+ }
+ 
++#ifdef DEBUG
+ static void ag71xx_dump_dma_regs(struct ag71xx *ag)
+ {
+ 	DBG("%s: dma_tx_ctrl=%08x, dma_tx_desc=%08x, dma_tx_status=%08x\n",
+@@ -87,6 +88,11 @@ static inline void ag71xx_dump_intr(stru
+ 		(intr & AG71XX_INT_RX_OF) ? "RXOF " : "",
+ 		(intr & AG71XX_INT_RX_BE) ? "RXBE " : "");
+ }
++#else /* !DEBUG */
++#define ag71xx_dump_dma_regs(__ag)
++#define ag71xx_dump_regs(__ag)
++#define ag71xx_dump_intr(__ag, __label, __intr)
++#endif /* DEBUG */
+ 
+ static void ag71xx_ring_free(struct ag71xx_ring *ring)
+ {
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-3.10/906-QCA-ag71xx-skb-headroom-increase-for-wifi.patch	2014-11-13 20:54:09.000000000 +0800
@@ -0,0 +1,25 @@
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-13 20:38:27.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-13 20:45:58.302771762 +0800
+@@ -55,6 +55,8 @@
+ #define AG71XX_TX_RING_SPLIT		512
+ #define AG71XX_TX_RING_DS_PER_PKT	DIV_ROUND_UP(AG71XX_TX_MTU_LEN, \
+ 						     AG71XX_TX_RING_SPLIT)
++#define AG71XX_HACK_WIFI_HEADROOM	128
++	     
+ #define AG71XX_TX_RING_SIZE_DEFAULT	128
+ #define AG71XX_RX_RING_SIZE_DEFAULT	128
+ 
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c	2014-11-13 20:51:47.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c	2014-11-13 20:53:27.882406424 +0800
+@@ -220,9 +220,9 @@ static int ag71xx_buffer_offset(struct a
+ 	 * so we don't need any extra alignment in that case.
+ 	 */
+ 	if (!ag71xx_get_pdata(ag)->is_ar724x || ag71xx_has_ar8216(ag))
+-		return offset;
++		return offset + AG71XX_HACK_WIFI_HEADROOM;
+ 
+-	return offset + NET_IP_ALIGN;
++	return offset + NET_IP_ALIGN + AG71XX_HACK_WIFI_HEADROOM;
+ }
+ 
+ static bool ag71xx_fill_rx_buf(struct ag71xx *ag, struct ag71xx_buf *buf,
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-3.10/908-QCA-reduce-napi-weight.patch	2014-11-13 00:58:19.005114565 +0800
@@ -0,0 +1,11 @@
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-12 23:56:42.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-13 00:06:28.542893466 +0800
+@@ -40,7 +40,7 @@
+ #define AG71XX_DRV_NAME		"ag71xx"
+ #define AG71XX_DRV_VERSION	"0.5.35"
+ 
+-#define AG71XX_NAPI_WEIGHT	64
++#define AG71XX_NAPI_WEIGHT	32
+ #define AG71XX_OOM_REFILL	(1 + HZ/10)
+ 
+ #define AG71XX_INT_ERR	(AG71XX_INT_RX_BE | AG71XX_INT_TX_BE)
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-3.10/909-QCA-ag71xx-cluster-align-structs-for-cache-perf.patch	2014-11-13 19:35:46.824308862 +0800
@@ -0,0 +1,28 @@
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-13 01:27:47.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-13 19:30:56.672351397 +0800
+@@ -147,20 +147,19 @@ struct ag71xx_debug {
+ };
+ 
+ struct ag71xx {
+-	void __iomem		*mac_base;
++	struct ag71xx_ring	rx_ring ____cacheline_aligned;
++	struct ag71xx_ring	tx_ring ____cacheline_aligned;
+ 
+-	spinlock_t		lock;
+-	struct platform_device	*pdev;
+ 	struct net_device	*dev;
++	struct platform_device	*pdev;
++	spinlock_t		lock;
+ 	struct napi_struct	napi;
++	void __iomem		*mac_base;
+ 	u32			msg_enable;
+ 
+ 	struct ag71xx_desc	*stop_desc;
+ 	dma_addr_t		stop_desc_dma;
+ 
+-	struct ag71xx_ring	rx_ring;
+-	struct ag71xx_ring	tx_ring;
+-
+ 	struct mii_bus		*mii_bus;
+ 	struct phy_device	*phy_dev;
+ 	void			*phy_priv;
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-3.10/918-QCA-netdev-inline-kfree_skbmem.patch	2014-11-13 19:36:21.247597312 +0800
@@ -0,0 +1,11 @@
+--- ./net/core/skbuff.c.orig	2014-11-13 01:27:35.000000000 +0800
++++ ./net/core/skbuff.c	2014-11-13 19:18:11.929854160 +0800
+@@ -530,7 +530,7 @@ static void skb_release_data(struct sk_b
+ /*
+  *	Free an skbuff by memory without cleaning the state.
+  */
+-static void kfree_skbmem(struct sk_buff *skb)
++static inline void kfree_skbmem(struct sk_buff *skb)
+ {
+ 	struct sk_buff *other;
+ 	atomic_t *fclone_ref;
