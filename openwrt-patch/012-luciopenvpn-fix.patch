--- ./feeds/luci/applications/luci-openvpn/luasrc/model/cbi/openvpn-advanced.lua	2014-08-24 12:43:12.606331294 +0800
+++ ./feeds/luci/applications/luci-openvpn/luasrc/model/cbi/openvpn-advanced.lua	2014-07-09 20:11:29.000000000 +0800
@@ -88,7 +88,7 @@ local knownParams = {
 
 		{ ListValue,	"mtu_disc",						{ "yes", "maybe", "no" },										translate("Enable Path MTU discovery") },
 		{ Flag,			"mtu_test",						0,																translate("Empirically measure MTU") },
-		{ Flag,			"comp_lzo",						0,																translate("Use fast LZO compression") },
+		{ ListValue,		"comp_lzo",					{ "yes", "no", "adaptive" },										translate("Use fast LZO compression") },
 		{ Flag,			"comp_noadapt",					0,																translate("Don't use adaptive lzo compression"),	{ comp_lzo=1 } },
 		{ Value,		"link_mtu",						1500,															translate("Set TCP/UDP MTU") },
 		{ Value,		"tun_mtu",						1500,															translate("Set tun/tap device MTU") },
--- ./feeds/luci/applications/luci-openvpn/luasrc/model/cbi/openvpn-basic.lua	2014-08-24 12:43:12.606331294 +0800
+++ ./feeds/luci/applications/luci-openvpn/luasrc/model/cbi/openvpn-basic.lua	2014-07-09 20:11:29.000000000 +0800
@@ -32,7 +32,7 @@ local basicParams = {
 	{ Value,"server_bridge","192.168.1.1 255.255.255.0 192.168.1.128 192.168.1.254", translate("Configure server bridge") },
 	{ Flag,"nobind",0, translate("Do not bind to local address and port") },
 
-	{ Flag,"comp_lzo",0, translate("Use fast LZO compression") },
+	{ ListValue,"comp_lzo",{"yes","no","adaptive"}, translate("Use fast LZO compression") },
 	{ Value,"keepalive","10 60", translate("Helper directive to simplify the expression of --ping and --ping-restart in server mode configurations") },
 
 	{ ListValue,"proto",{ "udp", "tcp" }, translate("Use protocol") },
--- ./feeds/luci/applications/luci-openvpn/luasrc/model/cbi/openvpn.lua	2014-08-24 12:43:12.606331294 +0800
+++ ./feeds/luci/applications/luci-openvpn/luasrc/model/cbi/openvpn.lua	2014-07-09 20:11:29.000000000 +0800
@@ -15,6 +15,8 @@ $Id$
 local fs  = require "nixio.fs"
 local sys = require "luci.sys"
 local uci = require "luci.model.uci".cursor()
+local testfullps = luci.sys.exec("ps --help 2>&1 | grep BusyBox") --check which ps do we have 
+local psstring = (string.len(testfullps)>0) and  "ps w" or  "ps axfw" --set command we use to get pid
 
 local m = Map("openvpn", translate("OpenVPN"))
 local s = m:section( TypedSection, "openvpn", translate("OpenVPN instances"), translate("Below is a list of configured OpenVPN instances and their current state") )
@@ -53,7 +55,11 @@ function s.create(self, name)
 		self.sectiontype .. ".select"
 	)
 
-	if name and not name:match("[^a-zA-Z0-9_]") then
+	name = luci.http.formvalue( 
+		luci.cbi.CREATE_PREFIX .. self.config .. "." ..
+		self.sectiontype .. ".text"
+	)
+	if string.len(name)>3 and not name:match("[^a-zA-Z0-9_]") then
 		uci:section(
 			"openvpn", "openvpn", name,
 			uci:get_all( "openvpn_recipes", recipe )
@@ -74,7 +80,7 @@ s:option( Flag, "enabled", translate("En
 
 local active = s:option( DummyValue, "_active", translate("Started") )
 function active.cfgvalue(self, section)
-	local pid = fs.readfile("/var/run/openvpn-%s.pid" % section)
+	local pid = sys.exec("%s | grep %s | grep openvpn | grep -v grep | awk '{print $1}'" % { psstring,section} )
 	if pid and #pid > 0 and tonumber(pid) ~= nil then
 		return (sys.process.signal(pid, 0))
 			and translatef("yes (%i)", pid)
@@ -97,10 +103,12 @@ function updown.cfgvalue(self, section)
 end
 function updown.write(self, section, value)
 	if self.option == "stop" then
-		luci.sys.call("/etc/init.d/openvpn down %s" % section)
+		local pid = sys.exec("%s | grep %s | grep openvpn | grep -v grep | awk '{print $1}'" % { psstring,section} )
+		sys.process.signal(pid,15) 
 	else
-		luci.sys.call("/etc/init.d/openvpn up %s" % section)
+		luci.sys.call("/etc/init.d/openvpn start %s" % section)
 	end
+	luci.http.redirect( self.redirect )
 end
 
 local port = s:option( DummyValue, "port", translate("Port") )
